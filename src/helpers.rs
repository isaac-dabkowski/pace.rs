#![allow(dead_code)]

// Helper enum to represent commonly referenced cross section MT values
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum MTNumber {
    Total = 1,
    ElasticScattering = 2,
    Fission = 18,
    NeutronAbsorption = 27,
    Dissapearance = 101,
    RadiativeCapture = 102,
}

// Helper function which maps MT values to their corresponding reaction
pub fn reaction_type_from_MT(mt: usize) -> String {
    match mt {
        1 => "(n,total)".to_string(),
        2 => "(z,z0)".to_string(),
        3 => "(z,nonelastic)".to_string(),
        4 => "(z,n)".to_string(),
        5 => "(n,anything)".to_string(),
        11 => "(z,2nd)".to_string(),
        16 => "(z,2n)".to_string(),
        17 => "(z,3n)".to_string(),
        18 => "(z,fission)".to_string(),
        19 => "(n,f)".to_string(),
        20 => "(n,nf)".to_string(),
        21 => "(n,2nf)".to_string(),
        22 => "(z,nα)".to_string(),
        23 => "(z,n3α)".to_string(),
        24 => "(z,2nα)".to_string(),
        25 => "(z,3nα)".to_string(),
        27 => "(n,abs)".to_string(),
        28 => "(z,np)".to_string(),
        29 => "(z,n2α)".to_string(),
        30 => "(z,2n2α)".to_string(),
        32 => "(z,nd)".to_string(),
        33 => "(z,nt)".to_string(),
        34 => "(z,n3He)".to_string(),
        35 => "(z,nd2α)".to_string(),
        36 => "(z,nt2α)".to_string(),
        37 => "(z,4n)".to_string(),
        38 => "(n,3nf)".to_string(),
        41 => "(z,2np)".to_string(),
        42 => "(z,3np)".to_string(),
        44 => "(z,n2p)".to_string(),
        45 => "(z,npα)".to_string(),
        51..=90 => "(z,ni)".to_string(),
        91 => "(z,nc)".to_string(),
        101 => "(n,disap)".to_string(),
        102 => "(z,γ)".to_string(),
        103 => "(z,p)".to_string(),
        104 => "(z,d)".to_string(),
        105 => "(z,t)".to_string(),
        106 => "(z,3He)".to_string(),
        107 => "(z,α)".to_string(),
        108 => "(z,2α)".to_string(),
        109 => "(z,3α)".to_string(),
        111 => "(z,2p)".to_string(),
        112 => "(z,pα)".to_string(),
        113 => "(z,t2α)".to_string(),
        114 => "(z,d2α)".to_string(),
        115 => "(z,pd)".to_string(),
        116 => "(z,pt)".to_string(),
        117 => "(z,dα)".to_string(),
        201 => "(z,Xn)".to_string(),
        202 => "(z,Xγ)".to_string(),
        203 => "(z,Xp)".to_string(),
        204 => "(z,Xd)".to_string(),
        205 => "(z,Xt)".to_string(),
        206 => "(z,X3He)".to_string(),
        207 => "(z,Xα)".to_string(),
        301 => "(z,totheat)".to_string(),
        443 => "(z,kinkerma)".to_string(),
        444 => "(z,damenergy)".to_string(),
        600 => "(z,p0)".to_string(),
        601..=648 => "(z,pi)".to_string(),
        649 => "(z,pc)".to_string(),
        650 => "(z,d0)".to_string(),
        651..=698 => "(z,di)".to_string(),
        699 => "(z,dc)".to_string(),
        700 => "(z,t0)".to_string(),
        701..=748 => "(z,ti)".to_string(),
        749 => "(z,tc)".to_string(),
        750 => "(z,3He0)".to_string(),
        751..=798 => "(z,3Hei)".to_string(),
        799 => "(z,3Hec)".to_string(),
        800 => "(z,α0)".to_string(),
        801..=848 => "(z,αi)".to_string(),
        849 => "(z,αc)".to_string(),
        875 => "(z,2n0)".to_string(),
        876..=890 => "(z,2ni)".to_string(),
        891 => "(z,2nc)".to_string(),
        1002 => "S(α,β)".to_string(),
        1004 => "S(α,β)".to_string(),
        _ => format!("(unknown MT={})", mt)
    }
}

// Helper function which maps MT values to their corresponding reaction and a description of the reaction
pub fn reaction_type_from_MT_with_comment(mt: usize) -> (String, String) {
    match mt {
        1 => ("(n,total)".to_string(), "incident neutrons only (sum over MTs 2, 4, 5, 11, 16-18, 22-26, 28-37, 41-43, 44-45, 102-117)".to_string()),
        2 => ("(z,z0)".to_string(), "elastic scattering".to_string()),
        3 => ("(z,nonelastic)".to_string(), "nonelastic (sum over MTs 4, 5, 11, 16-18, 22-26, 28-37, 41-42, 44-45, 102-117) - redundant".to_string()),
        4 => ("(z,n)".to_string(), "total inelastic scattering (incident neutrons); production of one neutron in the exit channel (sum over MTs 51 to 91) - redundant".to_string()),
        5 => ("(n,anything)".to_string(), "sum of all reactions not given explicitly in another MT number, used for lumping together multiple reaction modes".to_string()),
        11 => ("(z,2nd)".to_string(), "production of two neutrons and a deuteron, plus a residual if any".to_string()),
        16 => ("(z,2n)".to_string(), "production of two neutrons, plus a residual (if any) - some nuclides miss MT 16 and have only MTs 875-891 instead".to_string()),
        17 => ("(z,3n)".to_string(), "production of three neutrons, plus a residual (if any)".to_string()),
        18 => ("(z,fission)".to_string(), "total fission (sum over MTs 19-21 and 38)".to_string()),
        19 => ("(n,f)".to_string(), "1st-chance neutron-induced fission".to_string()),
        20 => ("(n,nf)".to_string(), "2nd-chance neutron-induced fission".to_string()),
        21 => ("(n,2nf)".to_string(), "3rd-chance neutron-induced fission".to_string()),
        22 => ("(z,nα)".to_string(), "production of a neutron and an alpha particle, plus a residual (if any)".to_string()),
        23 => ("(z,n3α)".to_string(), "production of a neutron and three alpha particles, plus a residual (if any)".to_string()),
        24 => ("(z,2nα)".to_string(), "production of two neutron and an alpha particle, plus a residual (if any)".to_string()),
        25 => ("(z,3nα)".to_string(), "production of three neutrons and an alpha particle, plus a residual (if any)".to_string()),
        27 => ("(n,abs)".to_string(), "absorption (sum over MTs 18 and 102-117) - redundant".to_string()),
        28 => ("(z,np)".to_string(), "production of a neutron and a proton, plus a residual (if any)".to_string()),
        29 => ("(z,n2α)".to_string(), "production of a neutrons and two alpha particles, plus a residual (if any)".to_string()),
        30 => ("(z,2n2α)".to_string(), "production of two neutrons and two alpha particles, plus a residual (if any)".to_string()),
        32 => ("(z,nd)".to_string(), "production of a neutron and a deuteron, plus a residual (if any)".to_string()),
        33 => ("(z,nt)".to_string(), "production of a neutron and a triton, plus a residual (if any)".to_string()),
        34 => ("(z,n3He)".to_string(), "production of a neutron and a 3He particle, plus a residual (if any)".to_string()),
        35 => ("(z,nd2α)".to_string(), "production of a neutron, a deuteron and two alpha particles, plus a residual (if any)".to_string()),
        36 => ("(z,nt2α)".to_string(), "production of a neutron, a triton, and two alpha particles, plus a residual (if any)".to_string()),
        37 => ("(z,4n)".to_string(), "production of four neutrons, plus a residual (if any)".to_string()),
        38 => ("(n,3nf)".to_string(), "4th-chance neutron-induced fission".to_string()),
        41 => ("(z,2np)".to_string(), "production of two neutrons and a proton, plus a residual (if any)".to_string()),
        42 => ("(z,3np)".to_string(), "production of three neutrons and a proton, plus a residual (if any)".to_string()),
        44 => ("(z,n2p)".to_string(), "production of a neutron and two protons, plus a residual (if any)".to_string()),
        45 => ("(z,npα)".to_string(), "production of a neutron, a proton and an alpha particle, plus a residual (if any)".to_string()),
        51..=90 => ("(z,ni)".to_string(), format!("inelastic scattering to excited states; production of a neutron leaving the residual nucleus in the {}-th excited state", mt - 50).to_string()),
        91 => ("(z,nc)".to_string(), "inelastic scattering to continuum; production of a neutron in the continuum not included in the above discrete representation".to_string()),
        101 => ("(n,disap)".to_string(), "total absorption or disappearance (sum over MTs 102-117) - redundant".to_string()),
        102 => ("(z,γ)".to_string(), "radiative capture (102g/102m for transmutation to ground/isomeric state)".to_string()),
        103 => ("(z,p)".to_string(), "production of a proton (sum over MTs 600-647, if present), plus a residual (if any)".to_string()),
        104 => ("(z,d)".to_string(), "production of a deuteron (sum over MTs 650-699, if present), plus a residual (if any)".to_string()),
        105 => ("(z,t)".to_string(), "production of a triton (sum over MTs 700-749, if present), plus a residual (if any)".to_string()),
        106 => ("(z,3He)".to_string(), "production of a 3He particle (sum over MTs 750-799, if present), plus a residual (if any)".to_string()),
        107 => ("(z,α)".to_string(), "production of an alpha particle (sum over MTs 800-849, if present), plus a residual (if any)".to_string()),
        108 => ("(z,2α)".to_string(), "production of two alpha particles, plus a residual (if any)".to_string()),
        109 => ("(z,3α)".to_string(), "production of three alpha particles, plus a residual (if any)".to_string()),
        111 => ("(z,2p)".to_string(), "production of two protons, plus a residual (if any)".to_string()),
        112 => ("(z,pα)".to_string(), "production of a proton and an alpha particle, plus a residual (if any)".to_string()),
        113 => ("(z,t2α)".to_string(), "production of a triton and two alpha particles, plus a residual (if any)".to_string()),
        114 => ("(z,d2α)".to_string(), "production of a deuteron and two alpha particles, plus a residual (if any)".to_string()),
        115 => ("(z,pd)".to_string(), "production of proton and a deuteron, plus a residual (if any)".to_string()),
        116 => ("(z,pt)".to_string(), "production of a proton and a triton, plus a residual (if any)".to_string()),
        117 => ("(z,dα)".to_string(), "production of a deuteron and an alpha particle, plus a residual (if any)".to_string()),
        201 => ("(z,Xn)".to_string(), "total neutron production - redundant".to_string()),
        202 => ("(z,Xγ)".to_string(), "total photon production - redundant".to_string()),
        203 => ("(z,Xp)".to_string(), "total proton production - redundant".to_string()),
        204 => ("(z,Xd)".to_string(), "total deuteron production - redundant".to_string()),
        205 => ("(z,Xt)".to_string(), "total triton production - redundant".to_string()),
        206 => ("(z,X3He)".to_string(), "total 3He production - redundant".to_string()),
        207 => ("(z,Xα)".to_string(), "total alpha production - redundant".to_string()),
        301 => ("(z,totheat)".to_string(), "total heat production; total heating number multiplied by total cross section (note difference to MCNP)".to_string()),
        443 => ("(z,kinkerma)".to_string(), "kinematic KERMA - Note to developers: check if this needs to be multiplied by total xs".to_string()),
        444 => ("(z,damenergy)".to_string(), "damage-energy production - Note to developers: check if this needs to be multiplied by total xs".to_string()),
        600 => ("(z,p0)".to_string(), "production of a proton, leaving the residual nucleus in the ground state - MTs 600-649 can be used to replace MT 103".to_string()),
        601..=648 => ("(z,pi)".to_string(), format!("production of a proton, leaving the residual nucleus in the {}-th excited state", mt - 600)),
        649 => ("(z,pc)".to_string(), "production of a proton the continuum not included in the above discrete representation".to_string()),
        650 => ("(z,d0)".to_string(), "production of a deuteron, leaving the residual nucleus in the ground state - MTs 650-699 can be used to replace MT 104".to_string()),
        651..=698 => ("(z,di)".to_string(), format!("production of a deuteron, leaving the residual nucleus in the {}-th excited state", mt - 650)),
        699 => ("(z,dc)".to_string(), "production of a deuteron in the continuum not included in the above discrete representation".to_string()),
        700 => ("(z,t0)".to_string(), "production of a triton, leaving the residual nucleus in the ground state - MTs 700-749 can be used to replace MT 105".to_string()),
        701..=748 => ("(z,ti)".to_string(), format!("production of a triton, leaving the residual nucleus in the {}-th excited state", mt - 700)),
        749 => ("(z,tc)".to_string(), "production of a triton in the continuum not included in the above discrete representation".to_string()),
        750 => ("(z,3He0)".to_string(), "production of a 3He particle, leaving the residual nucleus in the ground state - MTs 750-799 can be used to replace MT 106".to_string()),
        751..=798 => ("(z,3Hei)".to_string(), format!("production of a 3He particle, leaving the residual nucleus in the {}-th excited state", mt - 750)),
        799 => ("(z,3Hec)".to_string(), "production of a 3He particle in the continuum not included in the above discrete representation".to_string()),
        800 => ("(z,α0)".to_string(), "production of an alpha particle, leaving the residual nucleus in the ground state - MTs 800-849 can be used to replace MT 107".to_string()),
        801..=848 => ("(z,αi)".to_string(), format!("production of an alpha particle, leaving the residual nucleus in the {}-th excited state", mt - 800)),
        849 => ("(z,αc)".to_string(), "production of an alpha particle in the continuum not included in the above discrete representation".to_string()),
        875 => ("(z,2n0)".to_string(), "production of a neutron, leaving the residual nucleus in the ground state - MTs 875-891 can be used to replace MT 16".to_string()),
        876..=890 => ("(z,2ni)".to_string(), format!("production of a neutron, leaving the residual nucleus in the {}-th excited state", mt - 875)),
        891 => ("(z,2nc)".to_string(), "production of a neutron in the continuum not included in the above discrete representation".to_string()),
        1002 => ("S(α,β)".to_string(), "elastic scattering - not an official ENDF MT number".to_string()),
        1004 => ("S(α,β)".to_string(), "elastic scattering - not an official ENDF MT number".to_string()),
        _ => (format!("(unknown MT={})", mt), "unknown".to_string())
    }
}

// Helper function which return the incident and outgoing particles for an MT value
pub fn reaction_particles(mt: usize) -> (String, String) {
    let reaction_description = reaction_type_from_MT(mt);
    // Special cases
    if reaction_description.contains("S(α,β)") {
        ("n".to_string(), "n".to_string())
    } else if reaction_description.contains("unknown") {
        ("?".to_string(), "?".to_string())
    } else {
        let incident_particle = reaction_description[1..].split(",").next().unwrap().to_string();
        let outgoing_particle = reaction_description.split(",").nth(1).unwrap().trim_end_matches(")").to_string();
        (incident_particle, outgoing_particle)
    }
}

// Helper function which returns the element symbol for a given Z value
pub fn element_from_Z(Z: usize) -> String {
    match Z {
        1 => String::from("H"),
        2 => String::from("He"),
        3 => String::from("Li"),
        4 => String::from("Be"),
        5 => String::from("B"),
        6 => String::from("C"),
        7 => String::from("N"),
        8 => String::from("O"),
        9 => String::from("F"),
        10 => String::from("Ne"),
        11 => String::from("Na"),
        12 => String::from("Mg"),
        13 => String::from("Al"),
        14 => String::from("Si"),
        15 => String::from("P"),
        16 => String::from("S"),
        17 => String::from("Cl"),
        18 => String::from("Ar"),
        19 => String::from("K"),
        20 => String::from("Ca"),
        21 => String::from("Sc"),
        22 => String::from("Ti"),
        23 => String::from("V"),
        24 => String::from("Cr"),
        25 => String::from("Mn"),
        26 => String::from("Fe"),
        27 => String::from("Co"),
        28 => String::from("Ni"),
        29 => String::from("Cu"),
        30 => String::from("Zn"),
        31 => String::from("Ga"),
        32 => String::from("Ge"),
        33 => String::from("As"),
        34 => String::from("Se"),
        35 => String::from("Br"),
        36 => String::from("Kr"),
        37 => String::from("Rb"),
        38 => String::from("Sr"),
        39 => String::from("Y"),
        40 => String::from("Zr"),
        41 => String::from("Nb"),
        42 => String::from("Mo"),
        43 => String::from("Tc"),
        44 => String::from("Ru"),
        45 => String::from("Rh"),
        46 => String::from("Pd"),
        47 => String::from("Ag"),
        48 => String::from("Cd"),
        49 => String::from("In"),
        50 => String::from("Sn"),
        51 => String::from("Sb"),
        52 => String::from("Te"),
        53 => String::from("I"),
        54 => String::from("Xe"),
        55 => String::from("Cs"),
        56 => String::from("Ba"),
        57 => String::from("La"),
        58 => String::from("Ce"),
        59 => String::from("Pr"),
        60 => String::from("Nd"),
        61 => String::from("Pm"),
        62 => String::from("Sm"),
        63 => String::from("Eu"),
        64 => String::from("Gd"),
        65 => String::from("Tb"),
        66 => String::from("Dy"),
        67 => String::from("Ho"),
        68 => String::from("Er"),
        69 => String::from("Tm"),
        70 => String::from("Yb"),
        71 => String::from("Lu"),
        72 => String::from("Hf"),
        73 => String::from("Ta"),
        74 => String::from("W"),
        75 => String::from("Re"),
        76 => String::from("Os"),
        77 => String::from("Ir"),
        78 => String::from("Pt"),
        79 => String::from("Au"),
        80 => String::from("Hg"),
        81 => String::from("Tl"),
        82 => String::from("Pb"),
        83 => String::from("Bi"),
        84 => String::from("Po"),
        85 => String::from("At"),
        86 => String::from("Rn"),
        87 => String::from("Fr"),
        88 => String::from("Ra"),
        89 => String::from("Ac"),
        90 => String::from("Th"),
        91 => String::from("Pa"),
        92 => String::from("U"),
        93 => String::from("Np"),
        94 => String::from("Pu"),
        95 => String::from("Am"),
        96 => String::from("Cm"),
        97 => String::from("Bk"),
        98 => String::from("Cf"),
        99 => String::from("Es"),
        100 => String::from("Fm"),
        101 => String::from("Md"),
        102 => String::from("No"),
        103 => String::from("Lr"),
        104 => String::from("Rf"),
        105 => String::from("Db"),
        106 => String::from("Sg"),
        107 => String::from("Bh"),
        108 => String::from("Hs"),
        109 => String::from("Mt"),
        110 => String::from("Ds"),
        111 => String::from("Rg"),
        112 => String::from("Cn"),
        113 => String::from("Nh"),
        114 => String::from("Fl"),
        115 => String::from("Mc"),
        116 => String::from("Lv"),
        117 => String::from("Ts"),
        118 => String::from("Og"),
        _ => String::from("Unknown")
    }
}

// Helper function which returns the element name for a given Z value
pub fn isotope_name_from_Z_A(Z: usize, A: usize) -> String {
    format!("{}{}", element_from_Z(Z), A)
}
